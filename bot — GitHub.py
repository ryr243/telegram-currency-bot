import requests
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {} 

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_currency_rates():
    try:
        response = requests.get("https://open.er-api.com/v6/latest/UAH")
        data = response.json()
        if data.get("result") != "success":
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É" #–•—É–π –º–Ω–µ –≤ —Ä–æ—Ç

        rates = data["rates"]
        today = datetime.now().strftime('%d.%m.%Y')

        return (
            f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {today} (–∑–∞ 1 –≥—Ä–∏–≤–Ω—É):\n"
            f"USD: {round(rates.get('USD', 0), 4)}\n"
            f"EUR: {round(rates.get('EUR', 0), 4)}\n"
            f"PLN: {round(rates.get('PLN', 0), 4)}\n"
            f"GBP: {round(rates.get('GBP', 0), 4)}\n"
            f"BTC: {round(rates.get('BTC', 0), 6)}"
        )
    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç: {e}"


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data='rate')],
        [InlineKeyboardButton("üîÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä—Å —Å–µ–π—á–∞—Å", callback_data='now')],
        [InlineKeyboardButton("üí± –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data='convert')],
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe'),
            InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'rate' or query.data == 'now':
        text = get_currency_rates()
        await query.edit_message_text(text=text)

    elif query.data == 'convert':
        user_states[user_id] = 'awaiting_amount'
        await query.edit_message_text("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")

    elif query.data == 'subscribe':
        await query.edit_message_text("üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")

    elif query.data == 'unsubscribe':
        await query.edit_message_text("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if user_states.get(user_id) != 'awaiting_amount':
        return 

    try:
        amount = float(text.replace(" ", "").replace(",", "."))

        response = requests.get("https://open.er-api.com/v6/latest/UAH")
        data = response.json()
        if data.get("result") != "success":
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")
            return

        rates = data["rates"]
        usd = round(rates.get("USD", 0) * amount, 2)
        eur = round(rates.get("EUR", 0) * amount, 2)
        pln = round(rates.get("PLN", 0) * amount, 2)
        gbp = round(rates.get("GBP", 0) * amount, 2)
        btc = round(rates.get("BTC", 0) * amount, 6)

        reply = (
            f"üí± –ü–µ—Ä–µ–≤–æ–¥ {amount} –≥—Ä–∏–≤–µ–Ω:\n"
            f"USD: {usd}\n"
            f"EUR: {eur}\n"
            f"PLN: {pln}\n"
            f"GBP: {gbp}\n"
            f"BTC: {btc}"
        )

        await update.message.reply_text(reply)

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `1000`", parse_mode='Markdown')

    finally:
        user_states[user_id] = None  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞(–ü—É–ø—Å–∏–∫–∞)
def main():
    TELEGRAM_TOKEN = "..."

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
